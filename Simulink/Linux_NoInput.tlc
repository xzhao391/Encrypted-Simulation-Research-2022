%% File : Linux_NoInput.tlc
%% Created : Fri Jun 24 15:28:13 2022
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "Linux_NoInput.cpp".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  Linux_NoInput "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "Linux_NoInput_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void Linux_NoInput_Outputs_wrapper_accel(const real_T *xm,
			const real_T *dxm,
			const real_T *ddxm,
			const real_T *xs,
			const real_T *dxs,
			const real_T *ddxs,
			const real_T *mms,
			const real_T *kms,
			const real_T *bms,
			const real_T *um,
			const real_T *us,
			const real_T *mm,
			const real_T *ms,
			const real_T *bit_length,
			const real_T *rho,
			const real_T *rho_,
			const real_T *delta,
			real_T *tau_m,
			real_T *tau_s,
			void **pW,
			const real_T *p0, const int_T p_width0);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "Linux_NoInput_accel_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void Linux_NoInput_Start_wrapper(void **pW,
			const real_T *p0, const int_T p_width0);
    extern void Linux_NoInput_Outputs_wrapper(const real_T *xm,
			const real_T *dxm,
			const real_T *ddxm,
			const real_T *xs,
			const real_T *dxs,
			const real_T *ddxs,
			const real_T *mms,
			const real_T *kms,
			const real_T *bms,
			const real_T *um,
			const real_T *us,
			const real_T *mm,
			const real_T *ms,
			const real_T *bit_length,
			const real_T *rho,
			const real_T *rho_,
			const real_T *delta,
			real_T *tau_m,
			real_T *tau_s,
			void **pW,
			const real_T *p0, const int_T p_width0);
    extern void Linux_NoInput_Terminate_wrapper(void **pW,
			const real_T *p0, const int_T p_width0);
    void Linux_NoInput_Outputs_wrapper_accel(const real_T *xm,
			const real_T *dxm,
			const real_T *ddxm,
			const real_T *xs,
			const real_T *dxs,
			const real_T *ddxs,
			const real_T *mms,
			const real_T *kms,
			const real_T *bms,
			const real_T *um,
			const real_T *us,
			const real_T *mm,
			const real_T *ms,
			const real_T *bit_length,
			const real_T *rho,
			const real_T *rho_,
			const real_T *delta,
			real_T *tau_m,
			real_T *tau_s,
			void **pW,
			const real_T *p0, const int_T p_width0){
    Linux_NoInput_Outputs_wrapper(xm,
			dxm,
			ddxm,
			xs,
			dxs,
			ddxs,
			mms,
			kms,
			bms,
			um,
			us,
			mm,
			ms,
			bit_length,
			rho,
			rho_,
			delta,
			tau_m,
			tau_s,
			pW,
			p0, p_width0);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
    %assign hFileName = "Linux_NoInput_cgen_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void Linux_NoInput_Outputs_wrapper_cgen(const real_T *xm,
			const real_T *dxm,
			const real_T *ddxm,
			const real_T *xs,
			const real_T *dxs,
			const real_T *ddxs,
			const real_T *mms,
			const real_T *kms,
			const real_T *bms,
			const real_T *um,
			const real_T *us,
			const real_T *mm,
			const real_T *ms,
			const real_T *bit_length,
			const real_T *rho,
			const real_T *rho_,
			const real_T *delta,
			real_T *tau_m,
			real_T *tau_s,
			void **pW,
			const real_T *p0, const int_T p_width0);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "Linux_NoInput_cgen_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"

	extern void Linux_NoInput_Outputs_wrapper(const real_T *xm,
			const real_T *dxm,
			const real_T *ddxm,
			const real_T *xs,
			const real_T *dxs,
			const real_T *ddxs,
			const real_T *mms,
			const real_T *kms,
			const real_T *bms,
			const real_T *um,
			const real_T *us,
			const real_T *mm,
			const real_T *ms,
			const real_T *bit_length,
			const real_T *rho,
			const real_T *rho_,
			const real_T *delta,
			real_T *tau_m,
			real_T *tau_s,
			void **pW,
			const real_T *p0, const int_T p_width0);
	 void Linux_NoInput_Outputs_wrapper_cgen(const real_T *xm,
			const real_T *dxm,
			const real_T *ddxm,
			const real_T *xs,
			const real_T *dxs,
			const real_T *ddxs,
			const real_T *mms,
			const real_T *kms,
			const real_T *bms,
			const real_T *um,
			const real_T *us,
			const real_T *mm,
			const real_T *ms,
			const real_T *bit_length,
			const real_T *rho,
			const real_T *rho_,
			const real_T *delta,
			real_T *tau_m,
			real_T *tau_s,
			void **pW,
			const real_T *p0, const int_T p_width0) {
	Linux_NoInput_Outputs_wrapper(xm,
			dxm,
			ddxm,
			xs,
			dxs,
			ddxs,
			mms,
			kms,
			bms,
			um,
			us,
			mm,
			ms,
			bit_length,
			rho,
			rho_,
			delta,
			tau_m,
			tau_s,
			pW,
			p0, p_width0);
	}
    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void Linux_NoInput_Start_wrapper(void **pW,
			const real_T *p0, const int_T p_width0);

    SFB_EXTERN_C void Linux_NoInput_Outputs_wrapper(const real_T *xm,
			const real_T *dxm,
			const real_T *ddxm,
			const real_T *xs,
			const real_T *dxs,
			const real_T *ddxs,
			const real_T *mms,
			const real_T *kms,
			const real_T *bms,
			const real_T *um,
			const real_T *us,
			const real_T *mm,
			const real_T *ms,
			const real_T *bit_length,
			const real_T *rho,
			const real_T *rho_,
			const real_T *delta,
			real_T *tau_m,
			real_T *tau_s,
			void **pW,
			const real_T *p0, const int_T p_width0);

    SFB_EXTERN_C void Linux_NoInput_Terminate_wrapper(void **pW,
			const real_T *p0, const int_T p_width0);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pu6 = LibBlockInputSignalAddr(6, "", "", 0)
  %assign pu7 = LibBlockInputSignalAddr(7, "", "", 0)
  %assign pu8 = LibBlockInputSignalAddr(8, "", "", 0)
  %assign pu9 = LibBlockInputSignalAddr(9, "", "", 0)
  %assign pu10 = LibBlockInputSignalAddr(10, "", "", 0)
  %assign pu11 = LibBlockInputSignalAddr(11, "", "", 0)
  %assign pu12 = LibBlockInputSignalAddr(12, "", "", 0)
  %assign pu13 = LibBlockInputSignalAddr(13, "", "", 0)
  %assign pu14 = LibBlockInputSignalAddr(14, "", "", 0)
  %assign pu15 = LibBlockInputSignalAddr(15, "", "", 0)
  %assign pu16 = LibBlockInputSignalAddr(16, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    Linux_NoInput_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<pu7>, %<pu8>, %<pu9>, %<pu10>, %<pu11>, %<pu12>, %<pu13>, %<pu14>, %<pu15>, %<pu16>, %<py0>, %<py1>, %<ppw>, %<pp1>, %<param_width1>);
  %else
    Linux_NoInput_Outputs_wrapper_cgen(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<pu7>, %<pu8>, %<pu9>, %<pu10>, %<pu11>, %<pu12>, %<pu13>, %<pu14>, %<pu15>, %<pu16>, %<py0>, %<py1>, %<ppw>, %<pp1>, %<param_width1>);
  %endif

  %%
%endfunction


%% [EOF] Linux_NoInput.tlc

